import java.util.ArrayList;
import java.util.List;

/*The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.*/
public class Problem10 {

	public static void main(String[] args) {
		sieveOfEratostenes();
		bruteForce();
	}

	
	private static void sieveOfEratostenes(){
		System.out.println("Sieve of Eratostenes");
		long start=System.currentTimeMillis();		
		int sum=0;
		int N= 2_000_000;
		List<Boolean> isPrime=new ArrayList<>(N);
		isPrime.set(0, false);
		for (int i = 1; i < isPrime.size(); i++) {
			isPrime.set(i, true);
		}
		
		for (int i = 2; i < N; i++) {
			if (isPrime.get(i-1)) {
				sum+=i;
				
				for (int j = i*i; j < N; j= j+i) {
					isPrime.set(j, false);
				}
			}
		}
		long end=System.currentTimeMillis();
		System.out.println(end-start + " ms");
		System.out.println(sum);
	}
	
	private static void bruteForce(){
		System.out.println("Brute force");
		long start=System.currentTimeMillis();
		
		ArrayList<Integer> primes=new ArrayList<>();
		primes.add(2);
		int sum=0,sqrtNum=0;
		boolean isPrime=false;
		for (int i = 3; i < 2_000_000; i++) {
			isPrime=true;
			sqrtNum=(int) Math.sqrt(i);
			for (int j = 0; j < sqrtNum; j++) {
				if (i % primes.get(j) == 0) {
					isPrime=false;
					break;
				}
			}
			if (isPrime) {
				primes.add(i);
				sum+=i;
			}
		}
		long end=System.currentTimeMillis();
		System.out.println(end-start + " ms");
		System.out.println(sum);
	}
}
