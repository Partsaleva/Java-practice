import java.util.Arrays;

public class MaxSumSubArray {
	public static void main(String[] args) {
		int[] arr = {1, 2, -5, 6, 3, -1, 4, -2, 3, 3, -2, 3};
		int[] arr1 = {1, 2, -5, 6, -1, 4, -2, 3, -40, -2, 3};
		int[] arr2 = {-1, -2, -5, -6, -1,-4, -2, -3, -40, -2, -3};
		int[] arr3 = {-1, -2, -5, -6, -1,-4, -2, -3, 0, -2, -3};
		int[] arr4 = {-2, -3, 4, -1, -2, 1, 5, -3};
		System.out.println(Arrays.toString(MaxSumSubArray.findMaxSubArray(arr)));
		System.out.println(Arrays.toString(MaxSumSubArray.findMaxSubArray(arr1)));
		System.out.println(Arrays.toString(MaxSumSubArray.findMaxSubArray(arr2)));
		System.out.println(Arrays.toString(MaxSumSubArray.findMaxSubArray(arr3)));
		System.out.println(Arrays.toString(MaxSumSubArray.findMaxSubArray(arr4)));
		
		System.out.println(Arrays.toString(maxSubarray(arr)));
		System.out.println(Arrays.toString(maxSubarray(arr1)));
		System.out.println(Arrays.toString(maxSubarray(arr2)));
		System.out.println(Arrays.toString(maxSubarray(arr3)));
		System.out.println(Arrays.toString(maxSubarray(arr4)));
		
	}
	
	public static int[] maxSubarray(int[] arr) {
		int begin = 0, end = 0;
		int currentMax = arr[0];
		int max = arr[0];

		for (int i = 1; i < arr.length; i++) {
			begin = i - 1;
			if (arr[i] > currentMax + arr[i]) {
				currentMax = arr[i];
				begin = i;
			} else {
				currentMax += arr[i];
			}

			if (max > currentMax) {
				
			} else {
				max=currentMax;
				end=i;
			}
			// for tests: returns max sum of subarray
			currentMax = Math.max(arr[i], currentMax + arr[i]);
			max = Math.max(max, currentMax);
		}
		return Arrays.copyOfRange(arr, begin, end);
		

	}
	
	
	public static int[] findMaxSubArray(int[] arr) {
		if (arr == null || arr.length == 0) {
			return null;
		}
		

		long currentSum = 0, greatestSum = Integer.MIN_VALUE;
		long newSum = 0;
		int greatestStartIndex = 0, greatestEndIndex = 0;
		int currentStartIndex = 0;
		boolean isOnlyNegativeNums = true;
		int biggestNegative = Integer.MIN_VALUE;

		for (int index = 0; index < arr.length; index++) {

			// in case there is only negative integers the result will be the
			// biggestNegative element
			if (isOnlyNegativeNums) {
				if (arr[index] >= 0) {
					isOnlyNegativeNums = false;
				} else if (biggestNegative < arr[index]) {
					biggestNegative = arr[index];
				}
			}

			newSum = currentSum + arr[index];

			if (newSum < currentSum) {

				if (currentSum > greatestSum) {
					greatestStartIndex = currentStartIndex;
					greatestEndIndex = index;
					greatestSum = currentSum;
				}

				// if the sequence made with the current element is negative we
				// must
				// end the current sequence and see if it is the greatest one
				if (newSum < 0) {
					currentStartIndex = index + 1;
					currentSum = 0;
				}
			}
            
			currentSum = newSum;
		}

		if (currentSum > greatestSum) {
			greatestStartIndex = currentStartIndex;
			greatestEndIndex = arr.length;
			greatestSum = currentSum;
		}
        
		
		if (isOnlyNegativeNums) {
			return new int[] { biggestNegative };
		} 
		
		if (greatestSum == 0) {
			return new int[] { 0 };
		}
		else {
			int[] subArray = new int[greatestEndIndex - greatestStartIndex];

			System.arraycopy(arr, greatestStartIndex, subArray, 0, subArray.length);
			
			return subArray;
		}
	}
	
	
}