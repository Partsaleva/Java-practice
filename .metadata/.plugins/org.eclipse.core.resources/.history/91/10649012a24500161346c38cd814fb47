import java.util.ArrayList;
import java.util.List;

/*The number, 197, is called a circular prime because all 
 rotations of the digits: 197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?*/
public class Problem35 {

    public static void main(String[] args) {
        List<Integer> primes=new ArrayList<>();
        int number=0, d=0;
        for (int i = 0; i < 1_000_000; i++) {
            if (isPrime(i)) {
                number=i;
                while(number > 0){
                    d=number% 10;
                    if (d %2==0 || d==5) {
                        break;
                    }
                    number/=10;
                }
                primes.add(number);
            }
        }
        System.out.println(primes.size());
        List<Integer> circularPrimes=new ArrayList<>();
        

    }

    public static boolean circularPrime(int num, List<Integer> primes){
        
        return false;
        
        
    }
    
    private static boolean isPrime(long number){
        int lim=(int)Math.sqrt(number);
        for (int i = 2; i < lim; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
