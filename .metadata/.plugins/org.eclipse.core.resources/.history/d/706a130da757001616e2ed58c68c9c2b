
public class Problem58 {

    public static void main(String[] args) {
        //top-right: n^2 
        //top-left: n^2 - n + 1 
        //bottom-left: n^2 - 2n + 2 
        //bottom-right: n^2 - 3n + 3
        int tr=0,tl=0,bl=0,br=0;
        int n=8, all=4; int result=0;
        int countOfPrimes=8;
        boolean found=false;
        while (!found) {
            if (isPrime(n * n)) {
                countOfPrimes++;
            }
            if (isPrime(n * n - n + 1)) {
                countOfPrimes++;
            }
            if (isPrime(n * n - 2 * n + 2)) {
                countOfPrimes++;
            }
            if (isPrime(n * n - 3 * n + 3)) {
                countOfPrimes++;
            }
            if (countOfPrimes/(13+all) < 0.1) {
                found =true;
            }
            if (found) {
                result=n;
            }
            n++; all+=4;
        }
        System.out.println(result);
    }

    private static boolean isPrime(long number){
        if (number < 2) {
            return false;
        }
        int lim=(int)Math.sqrt(number);
        for (int i = 2; i <= lim; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
