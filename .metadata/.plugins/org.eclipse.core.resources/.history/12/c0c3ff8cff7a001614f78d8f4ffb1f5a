package h2Sets_and_Maps;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Problem13SrubskoUnleashed {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        Map<String, Map<String, Integer>> map = new HashMap<>();
        String input = null;

        while (true) {
            input = scan.nextLine();
            if (input.equals("End")) {
                break;
            }
            Matcher matcher = Pattern.compile("\\w+ *[\\w+]* @\\w+ [\\w+]*").matcher(input);
            matcher.find();
            String[] names = matcher.group().split(" @");
            String name = names[0];
            String city = names[1];
            matcher = Pattern.compile("\\d+ \\d+").matcher(input);
            matcher.find();
            String[] nums = matcher.group().split(" ");
            int price = Integer.parseInt(nums[0]);
            int numOfTickets = Integer.parseInt(nums[1]);
            int total = price * numOfTickets;
            Map<String, Integer> singers = new HashMap<>();
            if (!map.containsKey(city)) {
                singers.put(name, total);
                map.put(city, singers);
            } else {
                singers = map.get(city);
                if (singers.containsKey(name)) {
                    total += singers.get(name);
                } else {
                    singers.put(name, total);
                }

            }

        }
        for (Entry<String, Map<String, Integer>> entry : map.entrySet()) {
            Map<String, Integer> m = entry.getValue();
            m=(Map<String, Integer>) entriesSortedByValues(m);
            System.out.println(entry.getKey());
            for (Entry<String, Integer> ent : m.entrySet()) {
                System.out.println("# " + ent.getKey() + " -> " + ent.getValue());
            }
        }
        scan.close();
    }

    static <K, V extends Comparable<? super V>> List<Entry<K, V>> entriesSortedByValues(Map<K, V> map) {

        List<Entry<K, V>> sortedEntries = new ArrayList<Entry<K, V>>(map.entrySet());

        Collections.sort(sortedEntries, new Comparator<Entry<K, V>>() {
            @Override
            public int compare(Entry<K, V> e1, Entry<K, V> e2) {
                return e2.getValue().compareTo(e1.getValue());
            }
        });

        return sortedEntries;
    }
}
