package threads;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
 
public class MyCallable  {
 
  
     
    public static void main(String args[]){
    	//double result=0;
        //Get ExecutorService from Executors utility class, thread pool size is 10
        ExecutorService executor = Executors.newFixedThreadPool(4);
        //create a list to hold the Future object associated with Callable
        double result=0;
        //Create MyCallable instance
        Callable<Double> callable;
        for(int i=0; i< 30; i++){
        	callable = new PartSum(i);
            //submit Callable tasks to be executed by thread pool
            Future<Double> future = executor.submit(callable);
            //add Future to the list, we can get return value using Future
            try {
				result+=future.get();
			} catch (InterruptedException | ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
      
        System.out.println(1 / (((2 * Math.sqrt(2)) / 9801) * result));
        //shut down the executor service now
        executor.shutdown();
    }
 
}