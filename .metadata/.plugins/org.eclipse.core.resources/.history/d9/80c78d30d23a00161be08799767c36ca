package threads.pi;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.concurrent.Callable;

public class PartSum implements Callable<BigDecimal> {

	private int k;
	private boolean quiet;

	public PartSum(int k, boolean quiet) {
		this.k = k;
		this.quiet = quiet;
	}

	public static BigInteger factorial(BigInteger n) {
	    BigInteger result = BigInteger.ONE;

	    while (!n.equals(BigInteger.ZERO)) {
	        result = result.multiply(n);
	        n = n.subtract(BigInteger.ONE);
	    }

	    return result;
	}
	
	public static BigDecimal sqrt(BigDecimal value) {
	    BigDecimal x = new BigDecimal(Math.sqrt(value.doubleValue()));
	    return x.add(new BigDecimal(value.subtract(x.multiply(x)).doubleValue() / (x.doubleValue() * 2.0)));
	}

	@Override
	public BigDecimal call() throws Exception {
		if (quiet) {
			return quietMethod();
		} else {
			return infoMethod();
		}
	}
/*
	private Double quietMethod() {
		return (fact(4*k)*(1103+(26390*k)))/
				((Math.pow(fact(k), 4))*Math.pow(396, (4*k)));
	}
*/
	private BigDecimal quietMethod() {
		BigDecimal bigdec = new BigDecimal(factorial(BigInteger.valueOf(4*k)));
		BigDecimal bigdec2 = new BigDecimal(factorial(BigInteger.valueOf(k)));
		BigDecimal en = BigDecimal.valueOf(1103);
		BigDecimal ts = BigDecimal.valueOf(26390);
		return (bigdec.multiply(en.add(ts.multiply(BigDecimal.valueOf(k))))).
				divide((bigdec2.pow(4)).
						multiply((BigDecimal.valueOf(396)).pow(4*k)), 256, RoundingMode.HALF_UP);
	}

	private BigDecimal infoMethod() {
		System.out.println(Thread.currentThread().getName() + " started");
		long start = Calendar.getInstance().getTimeInMillis();
		
		BigDecimal bigdec = new BigDecimal(factorial(BigInteger.valueOf(4*k)));
		BigDecimal bigdec2 = new BigDecimal(factorial(BigInteger.valueOf(k)));
	
	
		BigDecimal sum = bigdec.multiply((BigDecimal.valueOf(1103)).add((BigDecimal.valueOf(26390)).multiply(BigDecimal.valueOf(k)))).
				divide((bigdec2.pow(4)).multiply((BigDecimal.valueOf(396)).pow(4*k)), 256, RoundingMode.HALF_UP);
		

		long time = Calendar.getInstance().getTimeInMillis() - start;

		System.out.println(Thread.currentThread().getName() + " stopped");
		System.out.println(Thread.currentThread().getName() + " execution time was (millis): " + time);
		;
		return sum;
	}
}