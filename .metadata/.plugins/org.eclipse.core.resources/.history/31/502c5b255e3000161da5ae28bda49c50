import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

public class Problem61 {

	public static void main(String[] args) {
		Map<Integer, List<Integer>> res = new HashMap<>();
		for (int i = 3; i < 9; i++) {
			List<Integer> list=generateNumbersOfEveryType(i);
			res.put(i,list);
		}
		System.out.println(res);
		Stack<Integer> tempList=new Stack<>();
		List<Long> result=new ArrayList<>();
		long fourDigitNumber=0;
		long nextNumber=0; boolean found=false;
		for (int i = 10; i < 100; i++) {
			for (int j = 10; j < 100; j++) {
				fourDigitNumber=i*100 +j;
				//System.out.println(fourDigitNumber);
				if (hasRoot(3, fourDigitNumber)) {				
					//System.out.println("!!!!!!!!!!!!!!!!"+fourDigitNumber);
					result.add(fourDigitNumber);
				}
										
			}
			for (int j2 = 10; j2 < 100; j2++) {
				nextNumber=j2*100+i;
				//System.out.println(nextNumber);
				if (hasRoot(8, nextNumber)){
					//System.out.println(nextNumber);
				//	result.remove(fourDigitNumber);
					found=true;
				}
				
			}
			
		}
		System.out.println(result);

	}
	
	
	 private static List<Integer> generateNumbersOfEveryType(int type) {

		 List<Integer> listOfNumbers=new ArrayList<>();
         int n = 0;
         int number = 0;

         while (number < 10000) {
             n++;
             switch (type) {

                 case 3:
                     //Triangle numbers
                     number = n * (n + 1) / 2;
                     break;
                 case 4:
                     // Square numbers
                     number = n * n;
                     break;
                 case 5:
                     // Pentagonal numbers
                     number = n * (3 * n - 1) / 2;
                     break;
                 case 6:
                     //Hexagonal numbers
                     number = n * (2*n - 1);
                     break;
                 case 7:
                     //Heptagonal numbers
                     number = n * (5 * n - 3) / 2;
                     break;
                 case 8:
                     //Octagonal numbers
                     number = n * (3 * n - 2);
                     break;
             }
           
            
         }

         if (number > 999){
             listOfNumbers.add(number);
         }
         return listOfNumbers;
     }
	
	 
	private static boolean hasRoot(int x, long number){
		double root=0;
		 switch (x) {

         case 3:
             //Triangle numbers
             // n * (n + 1) / 2;
        	 root= (-1+ Math.sqrt(1+number*8) )/2;       	
             break;
         case 4:
             // Square numbers
             //number = n * n;
        	 root=(-1 + Math.sqrt(number))/2;
             break;
         case 5:
             // Pentagonal numbers
             //number = n * (3 * n - 1) / 2;
        	 root= (1+ Math.sqrt(1+4*3*number*2) )/6;   
             break;
         case 6:
             //Hexagonal numbers
             //  number = n * (2*n - 1);
        	 root=(1 + Math.sqrt(1 + 4*2*number ))/4;
             break;
         case 7:
             //Heptagonal numbers
           //  number = n * (5 * n - 3) / 2;
        	 root= (3 + Math.sqrt(9 + 4*5*number*2))/10;
             break;
         case 8:
             //Octagonal numbers
           //  number = n * (3 * n - 2);
        	 root= (2 + Math.sqrt(4 + 4*3*number));
             break;
     }
		 return root % 1==0;
	}

}
