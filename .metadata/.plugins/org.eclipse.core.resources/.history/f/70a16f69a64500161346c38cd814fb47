import java.util.ArrayList;
import java.util.List;

/*The number, 197, is called a circular prime because all 
 rotations of the digits: 197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?*/
public class Problem35 {

    public static void main(String[] args) {
        List<Long> primes=new ArrayList<>();
        for (long i = 0; i < 1_000_000; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        System.out.println(countCircularPrimes(primes));

    }

    public static int countCircularPrimes(List<Long> primes){
        List<Long> circularPrimes =new ArrayList<>();
        long number=0;
        int multiplier = 1;
        int count=0; long n=0;
        for (int i = 0; i < primes.size(); i++) {
            number=primes.get(i);
            count=0;
            while(number>0){
                n=number %10;
                if (n%2==0 || n == 5) {
                    primes.remove(i);
                }
                number/=10;
                multiplier *= 10;
                count++;
            } 
            multiplier /= 10;
            number = primes.get(i);
            for (int j = 0; j < count; j++) {
                if(primes.contains(number)) {
                    circularPrimes.add(number);
                    primes.remove(number);
                }else if(!circularPrimes.contains(number)) {
                    return 0;
                }
         
                n = number % 10;
                number = n * multiplier + number / 10;
            }
        }
      
        
        return circularPrimes.size();
        
    }
    
    private static boolean isPrime(long number){
        int lim=(int)Math.sqrt(number);
        for (int i = 2; i < lim; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
