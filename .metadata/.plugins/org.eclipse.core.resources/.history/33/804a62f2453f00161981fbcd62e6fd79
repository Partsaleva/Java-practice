import java.math.BigDecimal;
import java.math.BigInteger;

/*A unit fraction contains 1 in the numerator. The decimal 
 * representation of the unit fractions with denominators 2 to 10 are given:

1/2 =   0.5, 1/3 =   0.(3), 1/4 =   0.25, 1/5 =   0.2, 1/6 =   0.1(6)
1/7 =   0.(142857), 1/8 =   0.125, 1/9 =   0.(1), 1/10    =   0.1
Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. 
It can be seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.*/
public class Problem26 {

    public static void main(String[] args) {
        // create 2 BigDecimal objects
        BigDecimal bg1, bg2;

        bg1 = new BigDecimal("143.145");
        bg2 = new BigDecimal("10.01");

    // BigDecimal array bg stores result of bg1/bg2
    BigDecimal bg[] = bg1.divideAndRemainder(bg2);

        // print quotient and remainder
    System.out.println("Division result");
    System.out.println("Quotient is " + bg[0] );
    System.out.println("Remainder is " + bg[1] );

    }

}
